{
	"$schema": "https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json",
	"mainEntryPointFilePath": "<projectFolder>/lib/types/index.d.ts",
	"bundledPackages": [],

	"apiReport": {
		"enabled": true
	},

	"docModel": {
		/**
		 * (REQUIRED) Whether to generate a doc model file.
		 */
		"enabled": true

		/**
		 * The output path for the doc model file.  The file extension should be ".api.json".
		 *
		 * The path is resolved relative to the folder of the config file that contains the setting; to change this,
		 * prepend a folder token such as "<projectFolder>".
		 *
		 * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
		 * DEFAULT VALUE: "<projectFolder>/temp/<unscopedPackageName>.api.json"
		 */
		// "apiJsonFilePath": "<projectFolder>/temp/<unscopedPackageName>.api.json",

		/**
		 * Whether "forgotten exports" should be included in the doc model file. Forgotten exports are declarations
		 * flagged with `ae-forgotten-export` warnings. See https://api-extractor.com/pages/messages/ae-forgotten-export/ to
		 * learn more.
		 *
		 * DEFAULT VALUE: "false"
		 */
		// "includeForgottenExports": false,

		/**
		 * The base URL where the project's source code can be viewed on a website such as GitHub or
		 * Azure DevOps. This URL path corresponds to the `<projectFolder>` path on disk.
		 *
		 * This URL is concatenated with the file paths serialized to the doc model to produce URL file paths to individual API items.
		 * For example, if the `projectFolderUrl` is "https://github.com/microsoft/rushstack/tree/main/apps/api-extractor" and an API
		 * item's file path is "api/ExtractorConfig.ts", the full URL file path would be
		 * "https://github.com/microsoft/rushstack/tree/main/apps/api-extractor/api/ExtractorConfig.js".
		 *
		 * This setting can be omitted if you don't need source code links in your API documentation reference.
		 *
		 * SUPPORTED TOKENS: none
		 * DEFAULT VALUE: ""
		 */
		// "projectFolderUrl": "http://github.com/path/to/your/projectFolder"
	},

	/**
	 * Configures how the .d.ts rollup file will be generated.
	 */
	"dtsRollup": {
		/**
		 * (REQUIRED) Whether to generate the .d.ts rollup file.
		 */
		"enabled": false

		/**
		 * Specifies the output path for a .d.ts rollup file to be generated without any trimming.
		 * This file will include all declarations that are exported by the main entry point.
		 *
		 * If the path is an empty string, then this file will not be written.
		 *
		 * The path is resolved relative to the folder of the config file that contains the setting; to change this,
		 * prepend a folder token such as "<projectFolder>".
		 *
		 * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
		 * DEFAULT VALUE: "<projectFolder>/dist/<unscopedPackageName>.d.ts"
		 */
		// "untrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>.d.ts",

		/**
		 * Specifies the output path for a .d.ts rollup file to be generated with trimming for an "alpha" release.
		 * This file will include only declarations that are marked as "@public", "@beta", or "@alpha".
		 *
		 * If the path is an empty string, then this file will not be written.
		 *
		 * The path is resolved relative to the folder of the config file that contains the setting; to change this,
		 * prepend a folder token such as "<projectFolder>".
		 *
		 * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
		 * DEFAULT VALUE: ""
		 */
		// "alphaTrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>-alpha.d.ts",

		/**
		 * Specifies the output path for a .d.ts rollup file to be generated with trimming for a "beta" release.
		 * This file will include only declarations that are marked as "@public" or "@beta".
		 *
		 * If the path is an empty string, then this file will not be written.
		 *
		 * The path is resolved relative to the folder of the config file that contains the setting; to change this,
		 * prepend a folder token such as "<projectFolder>".
		 *
		 * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
		 * DEFAULT VALUE: ""
		 */
		// "betaTrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>-beta.d.ts",

		/**
		 * Specifies the output path for a .d.ts rollup file to be generated with trimming for a "public" release.
		 * This file will include only declarations that are marked as "@public".
		 *
		 * If the path is an empty string, then this file will not be written.
		 *
		 * The path is resolved relative to the folder of the config file that contains the setting; to change this,
		 * prepend a folder token such as "<projectFolder>".
		 *
		 * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
		 * DEFAULT VALUE: ""
		 */
		// "publicTrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>-public.d.ts",

		/**
		 * When a declaration is trimmed, by default it will be replaced by a code comment such as
		 * "Excluded from this release type: exampleMember".  Set "omitTrimmingComments" to true to remove the
		 * declaration completely.
		 *
		 * DEFAULT VALUE: false
		 */
		// "omitTrimmingComments": true
	},

	/**
	 * Configures how the tsdoc-metadata.json file will be generated.
	 */
	"tsdocMetadata": {
		/**
		 * Whether to generate the tsdoc-metadata.json file.
		 *
		 * DEFAULT VALUE: true
		 */
		// "enabled": true,
		/**
		 * Specifies where the TSDoc metadata file should be written.
		 *
		 * The path is resolved relative to the folder of the config file that contains the setting; to change this,
		 * prepend a folder token such as "<projectFolder>".
		 *
		 * The default value is "<lookup>", which causes the path to be automatically inferred from the "tsdocMetadata",
		 * "typings" or "main" fields of the project's package.json.  If none of these fields are set, the lookup
		 * falls back to "tsdoc-metadata.json" in the package folder.
		 *
		 * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
		 * DEFAULT VALUE: "<lookup>"
		 */
		// "tsdocMetadataFilePath": "<projectFolder>/dist/tsdoc-metadata.json"
	},

	/**
	 * Configures how API Extractor reports error and warning messages produced during analysis.
	 *
	 * There are three sources of messages:  compiler messages, API Extractor messages, and TSDoc messages.
	 */
	"messages": {
		/**
		 * Configures handling of diagnostic messages reported by the TypeScript compiler engine while analyzing
		 * the input .d.ts files.
		 *
		 * TypeScript message identifiers start with "TS" followed by an integer.  For example: "TS2551"
		 *
		 * DEFAULT VALUE:  A single "default" entry with logLevel=warning.
		 */
		"compilerMessageReporting": {
			"default": {
				"logLevel": "warning"
			}
		},

		/**
		 * Configures handling of messages reported by API Extractor during its analysis.
		 *
		 * API Extractor message identifiers start with "ae-".  For example: "ae-extra-release-tag"
		 *
		 * DEFAULT VALUE: See api-extractor-defaults.json for the complete table of extractorMessageReporting mappings
		 */
		"extractorMessageReporting": {
			"default": {
				"logLevel": "warning"
			},

			"ae-missing-release-tag": {
				"logLevel": "none"
			}
		},

		/**
		 * Configures handling of messages reported by the TSDoc parser when analyzing code comments.
		 *
		 * TSDoc message identifiers start with "tsdoc-".  For example: "tsdoc-link-tag-unescaped-text"
		 *
		 * DEFAULT VALUE:  A single "default" entry with logLevel=warning.
		 */
		"tsdocMessageReporting": {
			"default": {
				"logLevel": "none"
				// "addToApiReportFile": false
			}

			// "tsdoc-link-tag-unescaped-text": {
			//   "logLevel": "warning",
			//   "addToApiReportFile": true
			// },
			//
			// . . .
		}
	}
}
